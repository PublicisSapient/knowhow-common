package com.publicissapient.kpidashboard.common.model.scm;

import com.publicissapient.kpidashboard.common.model.generic.BasicModel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Domain model representing a user/contributor in the Git repository.
 * 
 * This entity stores information about users who contribute to repositories,
 * including authors of commits and merge requests.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Document(collection = "scm_users")
@CompoundIndex(def = "{'repositoryName': 1, 'username': 1}", unique = true)
@CompoundIndex(def = "{'repositoryName': 1, 'email': 1}")
public class User extends BasicModel {


    /**
     * Repository name this user belongs to
     */
    @Indexed
    private String repositoryName;

    /**
     * Username of the user (indexed for fast lookups)
     */
    @Indexed
    private String username;

    /**
     * Email address of the user (indexed for fast lookups)
     */
    @Indexed
    private String email;

    // Additional getters and setters for other fields
    /**
     * Display name or full name of the user
     */
    private String displayName;

    /**
     * URL to the user's avatar image
     */
    private String avatarUrl;

    /**
     * URL to the user's profile page
     */
    private String profileUrl;

    /**
     * Company or organization the user belongs to
     */
    private String company;

    /**
     * Geographic location of the user
     */
    private String location;

    /**
     * User's bio or description
     */
    private String bio;

    /**
     * User's blog or website URL
     */
    private String blogUrl;

    /**
     * Number of public repositories owned by the user
     */
    private Integer publicRepos;

    /**
     * Number of followers the user has
     */
    private Integer followers;

    /**
     * Number of users this user is following
     */
    private Integer following;

    /**
     * Whether the user account is active
     */
    @Builder.Default
    private Boolean active = true;

    /**
     * Whether this is a bot account
     */
    @Builder.Default
    private Boolean bot = false;

    /**
     * External user ID from the platform (GitHub ID, GitLab ID, etc.)
     */
    @Indexed
    private String externalId;

    /**
     * List of repositories this user has access to or contributes to
     */
    private List<String> repositories;

    /**
     * Platform-specific additional data stored as JSON
     */
    private String platformData;

    /**
     * Timestamp when the user record was created
     */
    @CreatedDate
    private LocalDateTime createdAt;

    /**
     * Timestamp when the user record was last modified
     */
    @LastModifiedDate
    private LocalDateTime updatedAt;

    /**
     * Timestamp when the user was last seen (last commit or activity)
     */
    private LocalDateTime lastSeenAt;

    /**
     * Gets the display name, falling back to username if display name is not available.
     *
     * @return the display name or username
     */
    public String getEffectiveDisplayName() {
        return displayName != null && !displayName.trim().isEmpty() ? displayName : username;
    }

    /**
     * Checks if the user has complete profile information.
     *
     * @return true if the user has both username and email, false otherwise
     */
    public boolean hasCompleteProfile() {
        return username != null && !username.trim().isEmpty() &&
                email != null && !email.trim().isEmpty();
    }

    // Manual getters and setters for fields that might not be generated by Lombok
    // due to Spring Data annotations

    // Manual builder method since Lombok is not working properly
    public static UserBuilder builder() {
        return new UserBuilder();
    }

    public static class UserBuilder {
        private String id;
        private String repositoryName;
        private String username;
        private String email;
        private String displayName;
        private String avatarUrl;
        private String profileUrl;
        private String company;
        private String location;
        private String bio;
        private String blogUrl;
        private Integer publicRepos;
        private Integer followers;
        private Integer following;
        private Boolean active = true;
        private Boolean bot = false;
        private String externalId;
        private List<String> repositories;
        private String platformData;
        private LocalDateTime createdAt;
        private LocalDateTime updatedAt;
        private LocalDateTime lastSeenAt;

        public UserBuilder id(String id) {
            this.id = id;
            return this;
        }

        public UserBuilder repositoryName(String repositoryName) {
            this.repositoryName = repositoryName;
            return this;
        }

        public UserBuilder username(String username) {
            this.username = username;
            return this;
        }

        public UserBuilder email(String email) {
            this.email = email;
            return this;
        }

        public UserBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        public UserBuilder avatarUrl(String avatarUrl) {
            this.avatarUrl = avatarUrl;
            return this;
        }

        public UserBuilder profileUrl(String profileUrl) {
            this.profileUrl = profileUrl;
            return this;
        }

        public UserBuilder company(String company) {
            this.company = company;
            return this;
        }

        public UserBuilder location(String location) {
            this.location = location;
            return this;
        }

        public UserBuilder bio(String bio) {
            this.bio = bio;
            return this;
        }

        public UserBuilder blogUrl(String blogUrl) {
            this.blogUrl = blogUrl;
            return this;
        }

        public UserBuilder publicRepos(Integer publicRepos) {
            this.publicRepos = publicRepos;
            return this;
        }

        public UserBuilder followers(Integer followers) {
            this.followers = followers;
            return this;
        }

        public UserBuilder following(Integer following) {
            this.following = following;
            return this;
        }

        public UserBuilder active(Boolean active) {
            this.active = active;
            return this;
        }

        public UserBuilder bot(Boolean bot) {
            this.bot = bot;
            return this;
        }

        public UserBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        public UserBuilder repositories(List<String> repositories) {
            this.repositories = repositories;
            return this;
        }

        public UserBuilder platformData(String platformData) {
            this.platformData = platformData;
            return this;
        }

        public UserBuilder createdAt(LocalDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public UserBuilder updatedAt(LocalDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public UserBuilder lastSeenAt(LocalDateTime lastSeenAt) {
            this.lastSeenAt = lastSeenAt;
            return this;
        }

        public User build() {
            User user = new User();
            user.repositoryName = this.repositoryName;
            user.username = this.username;
            user.email = this.email;
            user.displayName = this.displayName;
            user.avatarUrl = this.avatarUrl;
            user.profileUrl = this.profileUrl;
            user.company = this.company;
            user.location = this.location;
            user.bio = this.bio;
            user.blogUrl = this.blogUrl;
            user.publicRepos = this.publicRepos;
            user.followers = this.followers;
            user.following = this.following;
            user.active = this.active;
            user.bot = this.bot;
            user.externalId = this.externalId;
            user.repositories = this.repositories;
            user.platformData = this.platformData;
            user.createdAt = this.createdAt;
            user.updatedAt = this.updatedAt;
            user.lastSeenAt = this.lastSeenAt;
            return user;
        }
    }
}